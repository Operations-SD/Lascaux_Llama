@page "/Chat"
@layout ChatLayout
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor context
@implements IAsyncDisposable

<style>
    body {
        overflow:hidden;
        background: url("https://agineuralnet.blob.core.windows.net/panels/Panel_Chat520.png") no-repeat;
    }

    /* ****************** This is the inner box ********************** */
    /* ****************** This is the inner box ********************** */
    /* ****************** This is the inner box ********************** */
    .chat-container {
        height: 870px;            /* Match the height of the background image */
        width: 500px;             /* Match the width of the background image */
        margin-top: 100px;         /* Adjust top margin as needed */
        margin-left: 10px;        /* Align with the background image position */
        position: absolute;       /* Ensure alignment with the background */
        overflow: auto;           /* Enable scrolling for overflow content */

/*         box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
        background-color: rgba(255, 111, 222, 0.8);  */

        border-radius: 8px;
        padding: 15px;
    }

    .message-input-container {
        margin-top: 24px;
        margin-left: 20px; /* Align input section with the chat container */
        width: 480px;      /* Match the width of the chat container */
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #0056b3;
    }
</style>

<div class="chat-container shadow-sm">
    @inject NewStateService NewMemoService
    @if (!userMessages.Any())
    {
        <p>No messages yet, start chatting!</p>
    }
    

    @functions {
        string GetUserColor(string username)
        {
            int hash = username.GetHashCode();
            int r = (hash & 0x7F0000) >> 16 | 0x80; // Ensures bright colors
            int g = (hash & 0x007F00) >> 8 | 0x80;
            int b = (hash & 0x00007F) | 0x80;
            return $"#{r:X2}{g:X2}{b:X2}";
        }
    }

    @foreach (var userMessage in userMessages)
    {
        string userColor = GetUserColor(userMessage.Username);

        @code {

        void SendToResponse(String mess)
        {

            NewMemoService.message = mess;
            NewMemoService.ShowNewMemo(); // Trigger the response
        }
       }

        <div class="row mb-3 d-flex @(userMessage.CurrentUser ? "justify-content-end" : "")">
            <div class="card shadow"
                 style="margin-left: 10px; margin-right: 10px; width: 16rem;
                    background-color: @(userMessage.CurrentUser ? "#A8E6CF" : userColor);">
                <div class="card-header">
                    @(userMessage.CurrentUser ? "You" : userMessage.Username)

                    <button class="modal-btn" @onclick="() => SendToResponse(userMessage.Message)"
                            style="position:relative; height:30px;width:120px;background-color:darkred;border-radius:5px;border:3px;">
                        Memo
                    </button>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">@userMessage.Message</li>
                </ul>

               
                <div class="card-footer">
                    <span class="small">@userMessage.DateSent.ToString("HH:mm | MMM dd")</span>
                </div>
            </div>
        </div>

       
    }

</div>




<div class="container message-input-container">
    <div class="row">
        <div class="col">
            <textarea @bind="messageInput" class="form-control" placeholder="Start typing..."></textarea>
        </div>
    </div><br />
    <div class="row">
        <div class="col-4">
            <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@isUserReadonly" maxlength="32" disabled />
        </div>
        <div class="col-3">
            <button type="button" @onclick="Send" disabled="@(!IsConnected)" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>
